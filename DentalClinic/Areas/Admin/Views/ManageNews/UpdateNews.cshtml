
@{
    ViewBag.Title = "UpdateNews";
}

@section styles{
    <style>
        .form-insert h2 {
            text-align: center;
        }

        .form-insert {
            display: flex;
        }

        .body {
            display: flex;
        }

        .left {
            padding-bottom: 20px;
            padding-top: 20px;
            width: 200px;
        }

        .right {
            display: flex;
            flex: 2;
            flex-direction: column;
            padding: 15px;
        }

        .preview-insert {
            padding-top: 10px;
        }

        .bottom {
            padding-right: 20px;
        }
    </style>
}


<div id="modal-insert" class="modal-insert">
    <input id="NewsId" value="@ViewBag.Id" type="hidden" />
    <div class="modal-custom-insert">
        <div class="form-insert">
            <div style="flex:1;"><h2>CẬP NHẬT TIN TỨC</h2></div>
            <div style="padding-right: 20px; "><button style="width: 150px;" class="btn btn-primary" onclick="UpdateNews();">Cập nhật tin tức</button></div>
        </div>
        <div class="body" style="display:flex">
            <div class="left">
                <div class="preview-insert">
                    <div class="preview" style="width: 200px; height: 200px; background-position: center; background-repeat: no-repeat; background-size: cover; border: .5px solid #d7d7d7; cursor: pointer; background-image: url('/Content/img/pick-image.png');" onclick="ChooseThumbnail(this);"></div>
                    <input type="file" style="display: none;" onchange="ChooseThumbnail_OnChange(this);" required />
                    <input type="hidden" id="Thumbnail" />
                </div>
            </div>

            <div class="right">
                <div class="form-group">
                    <label class="font-weight-semibold" for="name">Tiêu đề</label>
                    <input type="text" class="form-control" id="Title" placeholder="Nhập tiêu đề" required>
                </div>
                <div class="form-group">
                    <label class="font-weight-semibold" for="name">Mô tả</label>
                    <textarea class="form-control" aria-label="With textarea" style="resize:none;" placeholder="Nhập nội dung" rows="7" id="Description"></textarea>
                </div>
            </div>
        </div>
        <div class="bottom">
            <label class="font-weight-semibold" for="name">Nội dung</label>
            <textarea class="form-control" aria-label="With textarea" style="resize:none;" placeholder="Nhập lời mô tả" rows="10" id="Content"></textarea>
        </div>
    </div>

</div>

@section scripts{
    <script src="/Content/ckeditor/ckeditor.js"></script>
    <script>
        var contentEditor = CKEDITOR.replace('Content', {
            width: '100%',
            resize_minHeight: 150,
            height: '55vh',
            ...(window.configCkFinder || {})
        });

        var ChooseThumbnail = function (el) { $(el).siblings('input[type=file]').click(); }
        var ChooseThumbnail_OnChange = function (el) {
            let reader = new FileReader();
            reader.onloadend = function (e) {
                $(el).siblings('input[type=hidden]').val(e.currentTarget.result.substring(e.currentTarget.result.indexOf(',') + 1, e.currentTarget.result.length));
                $(el).siblings('.preview').css('background-image', `url(${e.currentTarget.result})`);
            }
            reader.readAsDataURL(el.files[0])
        }

        let GetNews = async function () {

            const id = $('#NewsId').val();
            console.log(id);
            if (id === '' || id === null || typeof id === 'undefined') return;
            let rp = await fetch('/api/AdminNews/GetNewsById?id=' + id, {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault
            });
            let rs = await rp.json();
            //console.log(rs);
            let item = rs.data;
            console.log(item);
            $('#Title').val(item.Title);
            $('.preview').css('background-image', `url(${item.Thumbnail})`)
            $('#Description').val(item.Description);
            $('#Content').val(item.NewsContent);

        }

        const UpdateNews = async function () {
            if (confirm('Bạn có chắc muốn cập nhật tin tức này?') === false) return;
            let model = {
                NewsId: $('#NewsId').val(),
                Title: $('#Title').val(),
                Thumbnail: $('#Thumbnail').val(),
                NewsContent: contentEditor.getData(),
                Description: $('#Description').val(),
            };
            console.log(model);

            if (GetObjectProperty(model, 'Title') === '') { alert('Tên tiêu đề không được để trống'); return; }
            if (GetObjectProperty(model, 'Description') === '') { alert('Mô tả không được để trống'); return; }
            if (GetObjectProperty(model, 'NewsContent') === '') { alert('Nội dung không được để trống'); return; }

            let url = '/api/AdminNews/UpdateNews';
            if (GetObjectProperty(model, 'NewsId') === '') url = '/api/AdminNews/InsertNews';
            console.log(url);
            const rp = await fetch(url, {
                method: 'post',
                headers: Enum.OptionHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rp.json();


            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                alert('Cập nhật tin tức thành công')
                window.location.href = '/Admin/ManageNews/';
            }
        }
        const initPage = async function () {
            await GetNews();
        }
        initPage();

    </script>
}

