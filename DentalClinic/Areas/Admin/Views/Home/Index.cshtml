
@{
    ViewBag.Title = "Index";
    ViewBag.Menu = "dashboard";
}
@section styles {
    <style>
        .dashboard-page {
        }

            .dashboard-page .dashboard-section {
                padding-bottom: 30px;
            }

            .dashboard-page .system-general-parameter {
            }

                .dashboard-page .system-general-parameter > div {
                    display: flex;
                    gap: 10px;
                }

                .dashboard-page .system-general-parameter .parameter-box {
                    flex: 1;
                    display: flex;
                    padding: 10px;
                    background-color: white;
                    border: 0.5px solid #eee;
                    align-items: center;
                }

                    .dashboard-page .system-general-parameter .parameter-box .icon {
                        display: flex;
                        width: 50px;
                        height: 50px;
                        align-items: center;
                        justify-content: center;
                        font-size: 25px;
                        border-radius: 50px;
                    }

                    .dashboard-page .system-general-parameter .parameter-box .parameter {
                        padding-left: 10px;
                    }

                        .dashboard-page .system-general-parameter .parameter-box .parameter .name {
                            font-size: 12px;
                            color: #a3a3a3;
                        }

                        .dashboard-page .system-general-parameter .parameter-box .parameter .value {
                            font-size: 15px;
                            font-weight: bold;
                        }

            .dashboard-page .system-revenue-chart {
                padding: 30px 10px;
                background-color: white;
                border: 0.5px solid #eee;
            }

            .dashboard-page .dashboard-chart {
            }

                .dashboard-page .dashboard-chart .chart-header {
                    display: flex;
                    justify-content: space-between;
                    padding-bottom: 35px;
                }

                    .dashboard-page .dashboard-chart .chart-header .chart-select {
                        flex: 1;
                        display: flex;
                        position: relative;
                        justify-content: flex-end;
                        gap: 10px;
                    }

                        .dashboard-page .dashboard-chart .chart-header .chart-select .chart-unit {
                            position: absolute;
                            bottom: -25px;
                            left: 4px;
                        }

                        .dashboard-page .dashboard-chart .chart-header .chart-select .select-input-month,
                        .dashboard-page .dashboard-chart .chart-header .chart-select .select-input-year {
                            padding: 5px 10px;
                            border-radius: 5px;
                            border-color: #d1d1d1;
                        }

                    .dashboard-page .dashboard-chart .chart-header .chart-name {
                        flex: 1;
                        text-align: center;
                        font-size: 21px;
                        font-weight: 500;
                    }

                    .dashboard-page .dashboard-chart .chart-header .chart-action {
                        display: flex;
                        flex: 1;
                        justify-content: flex-end;
                    }

                        .dashboard-page .dashboard-chart .chart-header .chart-action > div {
                            padding: 0 10px;
                        }

                        .dashboard-page .dashboard-chart .chart-header .chart-action a {
                            cursor: pointer;
                            color: #2d2df3;
                            background-color: aliceblue;
                            padding: 5px 10px;
                            border-radius: 2px;
                        }

                            .dashboard-page .dashboard-chart .chart-header .chart-action a:hover {
                                color: #6aaae3;
                                background-color: #cee8ff;
                            }

                    .dashboard-page .dashboard-chart .chart-header .chart-select .select-input-year {
                        margin-right: 120px;
                    }
    </style>
}

<div class="dashboard-page">
    <div class="dashboard-section">
        <div class="system-general-parameter">
            <div style="padding-bottom:10px;">
                <a href="/admin/balanceofuser" class="parameter-box">
                    <div class="icon badge-magenta"><i class="fa-solid fa-money-bill-trend-up"></i></div>
                    <div class="parameter system-revenue-total">
                        <div class="value"></div>
                        <div class="name"></div>
                    </div>
                </a>
                <a href="#" class="parameter-box">
                    <div class="icon badge-pill badge-cyan"><i class="fa-solid fa-dollar-sign"></i></div>
                    <div class="parameter system-profit-total">
                        <div class="value"></div>
                        <div class="name"></div>
                    </div>
                </a>
                <a href="/admin/ManageUser" class="parameter-box">
                    <div class="icon badge-pill badge-blue"><i class="fa-solid fa-users"></i></div>
                    <div class="parameter total-user">
                        <div class="value"></div>
                        <div class="name">NGƯỜI DÙNG</div>
                    </div>
                </a>
            </div>
            <div>

                <a class="parameter-box" style="border:.5px solid #00000000;background-color:transparent;"></a>
                <a class="parameter-box" style="border: .5px solid #00000000; background-color: transparent; "></a>
                <a class="parameter-box" style="border: .5px solid #00000000; background-color: transparent; "></a>
            </div>
        </div>
    </div>
    <div class="dashboard-section" id="section-profit-chart" style="display:none">
        <div class="dashboard-chart system-revenue-chart">
            <div class="chart-header">
                <div class="chart-select">
                    <div class="chart-unit">
                        (triệu)
                    </div>
                    <select class="select-input-month" onchange="ChoseMonthProfit(this);">
                    </select>
                    <select class="select-input-year" onchange="ChoseYearInMonthProfit(this);">
                    </select>
                </div>
                <div class="chart-name">LỢI NHUẬN</div>
                <div class="chart-action">
                    <div><a onclick="ProfitInMonth();">THÁNG</a></div>
                    <div><a onclick="ProfitInYear();">NĂM</a></div>
                </div>
            </div>
            <div style="height:300px">
                <div id="profit-chart-month">
                    <canvas id="total-profit-chart-month" style="height:300px;"></canvas>
                </div>
                <div id="profit-chart-year">
                    <canvas id="total-profit-chart-year" style="height:300px;"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="card" style="max-width:600px">
        <canvas id="RankChart" style="width:100%;max-width:600px"></canvas>
    </div>
</div>



@section scripts{
    <script>
        const now = new Date();
        var initPage = async function () {
            await GetTotalBalanceOfAllUser();
            await RenderRankChart();
            await GetTotalUserActive();
            await GetReportSystemRevenueThisMonth();
            await GetCashOfSystem();
            await GetTotalOrder();
            
        }
        var ChoseMonthProfit = function (el) {
            let month = $(el).val();
            ProfitInMonth(month);
        }
        var ChoseYearProfit = function (el) {
            let year = $(el).val();
            ProfitInYear(year);
        }
        var ChoseYearInMonthProfit = function (el) {
            let month = $(el).siblings('.select-input-month').val();
            ProfitInMonth(month);
        }
        var ChoseMonthRevenue = function (el) {
            let month = $(el).val();
            RevenueInMonth(month);
        }
        var ChoseYearInMonthRevenue = function (el) {
            let month = $(el).siblings('.select-input-month').val();
            RevenueInMonth(month);
        }

        const ChoseYearRevenue = function (el) {
            let year = $(el).val();
            RevenueInYear(year);
        }

        var RenderMonthAndYear = function () {
            var selectProfit = $('#section-profit-chart').find('.select-input-month');
            var selectRevenue = $('#section-revenue-chart').find('.select-input-month');
            const currentYear = now.getFullYear();
            const currentMonth = parseInt(now.getMonth()) + 1;
            const minYear = currentYear - 10;
            for (let numberYear = minYear; numberYear <= currentYear; numberYear++) {
                if (numberYear === currentYear) {
                    $('.select-input-year').append(`<option value="${numberYear}" selected>Năm ${numberYear}</option>`);
                } else {
                    $('.select-input-year').append(`<option value="${numberYear}">Năm ${numberYear}</option>`);
                }

            }
            for (let numberMonth = 1; numberMonth <= 12; numberMonth++) {
                if (numberMonth === currentMonth) {
                    selectProfit.append(`<option value="${numberMonth}" selected>Tháng ${numberMonth}</option>`);
                    selectRevenue.append(`<option value="${numberMonth}" selected>Tháng ${numberMonth}</option>`);
                } else {
                    selectProfit.append(`<option value="${numberMonth}">Tháng ${numberMonth}</option>`);
                    selectRevenue.append(`<option value="${numberMonth}">Tháng ${numberMonth}</option>`);
                }
            }
        }

        const GetTotalBalanceOfAllUser = async function () {
            const userAdminToken = GetCookie('UserAdminToken');
            if (userAdminToken == '') return;
            let rq = await fetch(Enum.ApiUrl + '/api/AdminReport/GetTotalBalanceOfAllUser', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault,
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.system-general-parameter .system-revenue-total  .name').text('HOA HỒNG CHO THÀNH VIÊN');
                $('.system-general-parameter .system-revenue-total  .value').text(NumberFormat(GetObjectProperty(rs,'data', 0)) + ' VNĐ');
            }
        }

        const Get = async function () {
            const userAdminToken = GetCookie('UserAdminToken');
            if (userAdminToken == '') return;
            let rq = await fetch(Enum.ApiUrl + '/api/AdminReport/GetTotalBalanceOfAllUser', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault,
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.system-general-parameter .system-apl-total  .value').text(NumberFormat(GetObjectProperty(rs, 'data', 0)));
            }
        }

        const GetTotalUserActive = async function () {
            const userAdminToken = GetCookie('UserAdminToken');
            if (userAdminToken == '') return;
            let rq = await fetch(Enum.ApiUrl + '/api/AdminReport/GetListUserActive', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault,
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.system-general-parameter .total-user  .value').text(NumberFormat(rs.data.length));
            }
        }

        const GetTotalOrder = async function () {
            const userAdminToken = GetCookie('UserAdminToken');
            if (userAdminToken == '') return;
            let rq = await fetch(Enum.ApiUrl + '/api/AdminReport/GetListUserActive', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault,
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.system-general-parameter .total-order-pending  .value').text(NumberFormat(GetObjectProperty(rs, 'data.lenght', 0)));
            }
        }

        const GetCashOfSystem = async function () {
            const userAdminToken = GetCookie('UserAdminToken');
            if (userAdminToken == '') return;
            let rq = await fetch(Enum.ApiUrl + '/api/AdminHome/GetCashOfSystem', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault,
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.system-general-parameter .system-profit-total  .name').text('SỐ DƯ CỦA HỆ THỐNG');
                $('.system-general-parameter .system-profit-total  .value').text(NumberFormat(GetObjectProperty(rs.data, 'Amount', 0)) + ' VNĐ');
            }
        }

        const RenderRankChart = async function () {
            const userAdminToken = GetCookie('UserAdminToken');
            if (userAdminToken == '') return;
            let rq = await fetch(Enum.ApiUrl + '/api/AdminReport/GetTotalUserForRank', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault,
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {

                const lsRankName = rs.data.TotalUserForRank.map(e => e.RankName)

                const yValue = rs.data.TotalUserForRank.map(e => e.TotalUser);

                var xValues = lsRankName;
                var yValues = yValue;
                var barColors = [
                    "#ea052b",
                    "#007ED6",
                    "#7CDDDD",
                    "#52D726",
                    "#FFEC00",
                    "#FF7300"
                ];
                new Chart("RankChart", {
                    type: "pie",
                    data: {
                        labels: xValues,
                        datasets: [{
                            backgroundColor: barColors,
                            data: yValues
                        }]
                    },
                    options: {
                        title: {
                            display: true,
                            text: "Thông kê người dùng theo hạng"
                        }
                    }
                });
            }
        }


        initPage();
    </script>
}

