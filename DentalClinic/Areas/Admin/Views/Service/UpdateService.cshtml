

@{
    ViewBag.Title = "Cập nhật dịch vụ";
    ViewBag.Menu = "service";
}

@section styles{
    <style>
        .create-product {
            max-width: 70%;
        }

            .create-product .title {
                text-align: center;
                text-transform: uppercase;
                font-size: 30px;
            }

        .form-add {
        }

            .form-add .price {
                margin-top: 10px;
            }

        .create-button {
            width: fit-content;
            padding: 5px 5px;
            color: white !important;
            border-radius: 5px;
            cursor: pointer;
        }

        .body {
            margin-top: 20px;
        }

        .product-image {
            padding: 0 10px 10px 0;
        }

            .product-image > .image {
                width: 100px;
                height: 100px;
                border-radius: 10px;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                position: relative;
            }

                .product-image > .image > .remove {
                    display: flex;
                    width: 20px;
                    height: 20px;
                    align-items: center;
                    justify-content: center;
                    font-size: 20px;
                    color: #f15050;
                    top: -5px;
                    right: -5px;
                    position: absolute;
                }

        .form .form-header .title {
            display: flex;
            flex: 1;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 18px;
            color: black;
        }

        .form .form-footer {
            display: flex;
            height: 70px;
            border-top: 0.5px solid #e9e9e9;
            padding: 15px;
            gap: 10px;
            align-items: center;
            justify-content: flex-end;
        }

        .modal {
            position: fixed;
            top: 0;
            right: 0;
            left: 0;
            bottom: 0;
            background: rgba(0,0,0,0.4);
            display: none;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .modal-container {
            background-color: #fff;
            width: 900px;
            max-width: calc(100% - 32px);
            position: relative;
            animation: modalFadeIn ease 0.5s;
            transition: top 0.4s, opacity 0.4s;
        }

        .modal-header {
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center !important;
            font-size: 20px;
            border-bottom: solid #ccc 0.5px;
            text-transform: uppercase;
        }

        .modal-body {
            width: 90%;
            margin: auto;
        }

        .modal-footer {
            width: 90%;
            margin: auto;
            justify-content: end;
            display: flex;
            gap: 10px;
            padding-bottom: 10px;
        }

            .modal-footer .update-btn {
                width: 100px;
                padding: 5px 5px;
                background-color: #435ebe;
                color: white;
                border-radius: 5px;
                cursor: pointer;
                border: solid #435ebe 1px;
            }

            .modal-footer .close-modal {
                width: 80px;
                color: black;
                border: solid #ccc 0.5px;
                cursor: pointer;
                border-radius: 5px;
            }

        @@keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-200px);
            }

            to {
                transform: translateY(0px);
                opacity: 1;
            }
        }
    </style>
}




<div class="body" style="display: flex; flex-wrap: wrap;">
    <input id="ServiceId" value="@ViewBag.Id" type="hidden" />
    <div style="flex: 1; display: flex; flex-direction: column; padding: 20px; min-width: 350px; ">
        <div class="form-group">
            <label class="font-weight-semibold" for="name">Ảnh dịch vụ</label>
            <div class="preview" style=" width: 100px; height: 100px; background-position: center; background-repeat: no-repeat; background-size: cover; border: .5px solid #d7d7d7; cursor: pointer; background-image: url('/Content/img/pick-image.png');" onclick="ChooseThumbnail(this);"></div>
            <input type="file" style="display:none;" onchange="ChooseThumbnail_OnChange(this);" required />
            <input type="hidden" id="Thumbnail" />
        </div>

        <div class="form-group" id="">
            <label class="font-weight-semibold" for="name">Tên dịch vụ</label>
            <input type="text" class="form-control" id="Name" placeholder="Nhập tên sản phẩm" required>
        </div>

        <div class="form-group price" id="">
            <label class="font-weight-semibold" for="name">Giá dịch vụ</label>
            <div class="input-group mb-3">
                <input type="text" class="form-control" id="Price" placeholder="Giá dịch vụ" onkeyup="ValidateInputOnlyNumber(event, this);">
                <span class="input-group-text">VNĐ</span>
            </div>

        </div>
        <div class="form-group">
            <label class="font-weight-semibold"> Danh mục</label>
            <div style="display:flex">
                <select class="form-control" id="CategoryId">
                    <option value="">Chọn danh mục</option>
                </select>
            </div>

        </div>
        <div class="form-group price" id="">
            <label class="font-weight-semibold" for="name">Thời gian dự kiến</label>
            <div class="input-group mb-3">
                <input type="text" class="form-control" id="ExpectTime" placeholder="Thời gian dự kiến" onkeyup="ValidateInputOnlyNumber(event, this);">
                <span class="input-group-text">Phút</span>
            </div>

        </div>
        <button type="button" onclick="UpdateService();" class="create-button btn btn-primary">Cập nhật dịch vụ</button>
    </div>
    <div style="flex: 2; display: flex; flex-direction: column; padding: 20px;">
        <div class="form-group product-property">
            <label class="font-weight-semibold">Mô tả</label>
            <textarea style="resize:none;" placeholder="Nhập mô tả cho sản phẩm" rows="30" class="form-control" aria-label="With textarea" id="Description"></textarea>
        </div>

    </div>

</div>



@section scripts{
    <script src="/Content/ckeditor/ckeditor.js"></script>
    <script>

        var editorDescription = CKEDITOR.replace('Description', {
            height: 600,
        });

        var ChooseThumbnail = function (el) { $(el).siblings('input[type=file]').click(); }
        var ChooseThumbnail_OnChange = function (el) {
            let reader = new FileReader();
            reader.onloadend = function (e) {
                $(el).siblings('input[type=hidden]').val(e.currentTarget.result.substring(e.currentTarget.result.indexOf(',') + 1, e.currentTarget.result.length));
                $(el).siblings('.preview').css('background-image', `url(${e.currentTarget.result})`);
            }
            reader.readAsDataURL(el.files[0])
        }
        const GetlistCategory = async function () {
            let rp = await fetch('/api/AdminServiceCategory/GetListServiceCateGory', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault
            });
            let rs = await rp.json();

            $('#CategoryId').html('<option value="" selected>Chọn danh mục</option>');
            for (let index = 0; index < rs.data.length; index++) {
                var x = rs.data[index]
                $('#CategoryId').append(`<option value="${x.ServiceCategoryId}">${x.Name}</option>`);
            }
        }
        let GetService = async function () {

            const id = $('#ServiceId').val();
            console.log(id);
            if (id === '' || id === null || typeof id === 'undefined') return;
            let rp = await fetch('/api/AdminService/GetServiceById?id=' + id, {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault
            });
            let rs = await rp.json();
            //console.log(rs);
            let item = rs.data;
            console.log(item);
            $('#Name').val(item.Name);
            $('.preview').css('background-image', `url(${item.Thumbnail})`)
            $('#ExpectTime').val(item.ExpectTime);
            $('#Description').val(item.Description);
            $('#Price').val(item.Price);
            $('#CategoryId').val(item.ServiceCategoryId).change();

        }

        const UpdateService = async function () {
            if (confirm('Bạn có chắc muốn cập nhật dịch vụ này?') === false) return;
            let model = {
                ServiceId: $('#ServiceId').val(),
                Name: $('#Name').val(),
                SearchName: RemoveVietnameseTones($('#Name').val()),
                Price: $('#Price').val(),
                ExpectTime: $('#ExpectTime').val(),
                Description: editorDescription.getData(),
                Thumbnail: $('#Thumbnail').val(),
                ServiceCategoryId: $('#CategoryId').val()
            };
            console.log(model);

            if (GetObjectProperty(model, 'Name') === '') { alert('Tên dịch vụ không được để trống'); return; }

            let url = '/api/AdminService/UpdateService';
            if (GetObjectProperty(model, 'ServiceId') === '') url = '/api/AdminService/InsertService';
            const rp = await fetch(url, {
                method: 'post',
                headers: Enum.OptionAdminHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rp.json();


            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                alert('Cập nhật dịch vụ thành công')
                window.location.href = '/Admin/Service/';
            }
        }

        const InitPage = async function () {
            await GetlistCategory();
            await GetService();

        }
        InitPage();
    </script>
}
